export async function instantiateWasmModule() {
          const base64Wasm = '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';
          const imports = {};
          function base64ToArrayBuffer(base64) {
            const binaryString = Buffer.from(base64, 'base64').toString('binary')
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; ++i) {
              bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
          }
          const module = base64ToArrayBuffer(base64Wasm);
  const adaptedImports = {
    env: Object.assign(Object.create(globalThis), imports.env || {}, {
      abort(message, fileName, lineNumber, columnNumber) {
        // ~lib/builtins/abort(~lib/string/String | null?, ~lib/string/String | null?, u32?, u32?) => void
        message = __liftString(message >>> 0);
        fileName = __liftString(fileName >>> 0);
        lineNumber = lineNumber >>> 0;
        columnNumber = columnNumber >>> 0;
        (() => {
          // @external.js
          throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);
        })();
      },
    }),
  };
  const instantiatedSource = await WebAssembly.instantiate(module, adaptedImports);
           const exports = instantiatedSource.exports || (instantiatedSource.instance ? instantiatedSource.instance.exports : undefined);
  const memory = exports.memory || imports.env.memory;
  const adaptedExports = Object.setPrototypeOf({
    topologicalSort(edges) {
      // lib/assembly/topological-sort.as/topologicalSort(~lib/array/Array<~lib/array/Array<i32>>) => ~lib/array/Array<i32>
      edges = __lowerArray((pointer, value) => { __setU32(pointer, __lowerArray(__setU32, 4, 2, value) || __notnull()); }, 5, 2, edges) || __notnull();
      return __liftArray(__getI32, 2, exports.topologicalSort(edges) >>> 0);
    },
    verifyAcyclicity(outEdges, inEdges) {
      // lib/assembly/verify-acyclicity.as/verifyAcyclicity(~lib/array/Array<~lib/array/Array<i32>>, ~lib/array/Array<~lib/array/Array<i32>>) => ~lib/array/Array<i32>
      outEdges = __retain(__lowerArray((pointer, value) => { __setU32(pointer, __lowerArray(__setU32, 4, 2, value) || __notnull()); }, 5, 2, outEdges) || __notnull());
      inEdges = __lowerArray((pointer, value) => { __setU32(pointer, __lowerArray(__setU32, 4, 2, value) || __notnull()); }, 5, 2, inEdges) || __notnull();
      try {
        return __liftArray(__getI32, 2, exports.verifyAcyclicity(outEdges, inEdges) >>> 0);
      } finally {
        __release(outEdges);
      }
    },
  }, exports);
  function __liftString(pointer) {
    if (!pointer) return null;
    const
      end = pointer + new Uint32Array(memory.buffer)[pointer - 4 >>> 2] >>> 1,
      memoryU16 = new Uint16Array(memory.buffer);
    let
      start = pointer >>> 1,
      string = "";
    while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));
    return string + String.fromCharCode(...memoryU16.subarray(start, end));
  }
  function __liftArray(liftElement, align, pointer) {
    if (!pointer) return null;
    const
      dataStart = __getU32(pointer + 4),
      length = __dataview.getUint32(pointer + 12, true),
      values = new Array(length);
    for (let i = 0; i < length; ++i) values[i] = liftElement(dataStart + (i << align >>> 0));
    return values;
  }
  function __lowerArray(lowerElement, id, align, values) {
    if (values == null) return 0;
    const
      length = values.length,
      buffer = exports.__pin(exports.__new(length << align, 1)) >>> 0,
      header = exports.__pin(exports.__new(16, id)) >>> 0;
    __setU32(header + 0, buffer);
    __dataview.setUint32(header + 4, buffer, true);
    __dataview.setUint32(header + 8, length << align, true);
    __dataview.setUint32(header + 12, length, true);
    for (let i = 0; i < length; ++i) lowerElement(buffer + (i << align >>> 0), values[i]);
    exports.__unpin(buffer);
    exports.__unpin(header);
    return header;
  }
  const refcounts = new Map();
  function __retain(pointer) {
    if (pointer) {
      const refcount = refcounts.get(pointer);
      if (refcount) refcounts.set(pointer, refcount + 1);
      else refcounts.set(exports.__pin(pointer), 1);
    }
    return pointer;
  }
  function __release(pointer) {
    if (pointer) {
      const refcount = refcounts.get(pointer);
      if (refcount === 1) exports.__unpin(pointer), refcounts.delete(pointer);
      else if (refcount) refcounts.set(pointer, refcount - 1);
      else throw Error(`invalid refcount '${refcount}' for reference '${pointer}'`);
    }
  }
  function __notnull() {
    throw TypeError("value must not be null");
  }
  let __dataview = new DataView(memory.buffer);
  function __setU32(pointer, value) {
    try {
      __dataview.setUint32(pointer, value, true);
    } catch {
      __dataview = new DataView(memory.buffer);
      __dataview.setUint32(pointer, value, true);
    }
  }
  function __getI32(pointer) {
    try {
      return __dataview.getInt32(pointer, true);
    } catch {
      __dataview = new DataView(memory.buffer);
      return __dataview.getInt32(pointer, true);
    }
  }
  function __getU32(pointer) {
    try {
      return __dataview.getUint32(pointer, true);
    } catch {
      __dataview = new DataView(memory.buffer);
      return __dataview.getUint32(pointer, true);
    }
  }
  return adaptedExports;
}
